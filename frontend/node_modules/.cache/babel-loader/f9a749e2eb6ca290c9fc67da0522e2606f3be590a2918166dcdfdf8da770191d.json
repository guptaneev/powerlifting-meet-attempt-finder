{"ast":null,"code":"var _jsxFileName = \"/Users/neevgupta/huggingface/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport TrainingDataForm from \"./components/TrainingDataForm\";\nimport Predictions from \"./components/Predictions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [trainingData, setTrainingData] = useState([]);\n  const [predictions, setPredictions] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Load template data when component mounts\n    fetchTemplate();\n  }, []);\n  const fetchTemplate = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5001/api/template\");\n      const data = await response.json();\n      setTrainingData(data);\n    } catch (err) {\n      setError(\"Failed to load template data\");\n      console.error(err);\n    }\n  };\n  const handleSubmit = async data => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Send all training data\n      const promises = data.map(async row => {\n        const response = await fetch(\"http://localhost:5001/api/predict\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(row)\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to get predictions\");\n        }\n        return response.json();\n      });\n      const results = await Promise.all(promises);\n\n      // Combine all predictions by taking the maximum value for each attempt\n      const combinedPredictions = {\n        squat: {\n          attempt_1: Math.max(...results.map(r => r.squat.attempt_1)),\n          attempt_2: Math.max(...results.map(r => r.squat.attempt_2)),\n          attempt_3: Math.max(...results.map(r => r.squat.attempt_3))\n        },\n        bench: {\n          attempt_1: Math.max(...results.map(r => r.bench.attempt_1)),\n          attempt_2: Math.max(...results.map(r => r.bench.attempt_2)),\n          attempt_3: Math.max(...results.map(r => r.bench.attempt_3))\n        },\n        deadlift: {\n          attempt_1: Math.max(...results.map(r => r.deadlift.attempt_1)),\n          attempt_2: Math.max(...results.map(r => r.deadlift.attempt_2)),\n          attempt_3: Math.max(...results.map(r => r.deadlift.attempt_3))\n        }\n      };\n      setPredictions(combinedPredictions);\n    } catch (err) {\n      setError(\"Failed to get predictions\");\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Powerlifting Meet Predictor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(TrainingDataForm, {\n        data: trainingData,\n        onSubmit: handleSubmit,\n        loading: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 19\n      }, this), predictions && /*#__PURE__*/_jsxDEV(Predictions, {\n        predictions: predictions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"kpk/lCZqOs+nT/pvuZBqtsDaIko=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TrainingDataForm","Predictions","jsxDEV","_jsxDEV","App","_s","trainingData","setTrainingData","predictions","setPredictions","loading","setLoading","error","setError","fetchTemplate","response","fetch","data","json","err","console","handleSubmit","promises","map","row","method","headers","body","JSON","stringify","ok","Error","results","Promise","all","combinedPredictions","squat","attempt_1","Math","max","r","attempt_2","attempt_3","bench","deadlift","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["/Users/neevgupta/huggingface/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport TrainingDataForm from \"./components/TrainingDataForm\";\nimport Predictions from \"./components/Predictions\";\n\nfunction App() {\n  const [trainingData, setTrainingData] = useState([]);\n  const [predictions, setPredictions] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Load template data when component mounts\n    fetchTemplate();\n  }, []);\n\n  const fetchTemplate = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5001/api/template\");\n      const data = await response.json();\n      setTrainingData(data);\n    } catch (err) {\n      setError(\"Failed to load template data\");\n      console.error(err);\n    }\n  };\n\n  const handleSubmit = async (data) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Send all training data\n      const promises = data.map(async (row) => {\n        const response = await fetch(\"http://localhost:5001/api/predict\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(row),\n        });\n\n        if (!response.ok) {\n          throw new Error(\"Failed to get predictions\");\n        }\n\n        return response.json();\n      });\n\n      const results = await Promise.all(promises);\n      \n      // Combine all predictions by taking the maximum value for each attempt\n      const combinedPredictions = {\n        squat: {\n          attempt_1: Math.max(...results.map(r => r.squat.attempt_1)),\n          attempt_2: Math.max(...results.map(r => r.squat.attempt_2)),\n          attempt_3: Math.max(...results.map(r => r.squat.attempt_3))\n        },\n        bench: {\n          attempt_1: Math.max(...results.map(r => r.bench.attempt_1)),\n          attempt_2: Math.max(...results.map(r => r.bench.attempt_2)),\n          attempt_3: Math.max(...results.map(r => r.bench.attempt_3))\n        },\n        deadlift: {\n          attempt_1: Math.max(...results.map(r => r.deadlift.attempt_1)),\n          attempt_2: Math.max(...results.map(r => r.deadlift.attempt_2)),\n          attempt_3: Math.max(...results.map(r => r.deadlift.attempt_3))\n        }\n      };\n\n      setPredictions(combinedPredictions);\n    } catch (err) {\n      setError(\"Failed to get predictions\");\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Powerlifting Meet Predictor</h1>\n      </header>\n      <main>\n        <TrainingDataForm\n          data={trainingData}\n          onSubmit={handleSubmit}\n          loading={loading}\n        />\n        {error && <div className=\"error\">{error}</div>}\n        {predictions && <Predictions predictions={predictions} />}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}